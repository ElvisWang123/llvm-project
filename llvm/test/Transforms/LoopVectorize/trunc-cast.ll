; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt --passes=loop-vectorize -S %s -mtriple riscv64 -mattr=+v | FileCheck %s
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"

define void @h(ptr %i, ptr %k, i64 %idxprom.us) #0 {
entry:
  br label %for.body.us

for.body.us:                                      ; preds = %cond.end23.us, %entry
  %l.046.us = phi i32 [ %add.us, %cond.end23.us ], [ 0, %entry ]
  %conv284345.us = phi i8 [ %conv28.us, %cond.end23.us ], [ 0, %entry ]
  %idxprom.us1 = zext i32 %l.046.us to i64
  %arrayidx3.us = getelementptr [2 x i16], ptr %k, i64 %idxprom.us1, i64 %idxprom.us
  %0 = load i16, ptr %arrayidx3.us, align 2
  %tobool4.not.us = icmp eq i16 %0, 0
  br i1 %tobool4.not.us, label %cond.false7.us, label %cond.end23.us

cond.false7.us:                                   ; preds = %for.body.us
  %1 = load i64, ptr %i, align 8
  %shl.us = shl i64 0, %1
  %tobool12.not.us = icmp eq i64 %shl.us, 0
  br i1 %tobool12.not.us, label %cond.end23.us, label %cond.true14.us

cond.true14.us:                                   ; preds = %cond.false7.us
  %2 = load i64, ptr %i, align 8
  %3 = trunc i64 %2 to i32
  br label %cond.end23.us

cond.end23.us:                                    ; preds = %cond.true14.us, %cond.false7.us, %for.body.us
  %cond24.us = phi i32 [ %3, %cond.true14.us ], [ 0, %for.body.us ], [ 0, %cond.false7.us ]
  %4 = trunc i32 %cond24.us to i8
  %conv28.us = mul i8 0, %4
  %arrayidx31.us = getelementptr [2 x i64], ptr %i, i64 0, i64 %idxprom.us1
  %5 = load i64, ptr %arrayidx31.us, align 8
  %6 = trunc i64 %5 to i16
  %conv32.us = xor i16 %6, 0
  store i16 %conv32.us, ptr null, align 2
  %add.us = add i32 %l.046.us, 4
  %tobool.not.us = icmp eq i32 %add.us, 0
  br i1 %tobool.not.us, label %for.cond.for.cond.cleanup_crit_edge, label %for.body.us

for.cond.for.cond.cleanup_crit_edge:              ; preds = %cond.end23.us
  store i8 %4, ptr null, align 1
  ret void
}

attributes #0 = { "target-features"="+64bit,+a,+c,+d,+f,+m,+relax,+v,+zicsr,+zifencei,+zmmul,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl128b,+zvl32b,+zvl64b,-b,-e,-experimental-smctr,-experimental-ssctr,-experimental-zalasr,-experimental-zicfilp,-experimental-zicfiss,-experimental-zvbc32e,-experimental-zvkgs,-h,-sha,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smcdeleg,-smcsrind,-smdbltrp,-smepmp,-smmpm,-smnpm,-smrnmi,-smstateen,-ssaia,-ssccfg,-ssccptr,-sscofpmf,-sscounterenw,-sscsrind,-ssdbltrp,-ssnpm,-sspm,-ssqosid,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-supm,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-svvptc,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-xwchc,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfbfmin,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-ztso,-zvbb,-zvbc,-zvfbfmin,-zvfbfwma,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b" }

;.
; CHECK: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]], [[META2:![0-9]+]]}
; CHECK: [[META1]] = !{!"llvm.loop.isvectorized", i32 1}
; CHECK: [[META2]] = !{!"llvm.loop.unroll.runtime.disable"}
; CHECK: [[LOOP3]] = distinct !{[[LOOP3]], [[META2]], [[META1]]}
;.
